<!DOCTYPE html>
<html>

<head>
  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7726590371480649"
    crossorigin="anonymous"></script>
  <link rel="stylesheet" href="/styles/header.css" type="text/css">
  <link rel="icon" href="/assets/images/foxycake.png">
  <title>Foxy | Loja</title>
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-E3J7N4BP8L"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());
    gtag('config', 'G-E3J7N4BP8L');
  </script>
  <link rel="stylesheet" href="/styles/dashboard.css" type="text/css">
  <link rel="stylesheet" href="/styles/loading.css" type="text/css">
</head>

<body>
  <div id="loadingOverlay" class="loading-overlay">
    <%- include('../../global/loading') %>
  </div>

  <%- include('../sidebar') %>

    <ins id="adBanner" class="adsbygoogle" style="display:inline-block;width:160px;height:600px"
      data-ad-client="ca-pub-7726590371480649" data-ad-slot="4619028248"></ins>
    <script>
      (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
    <h1 class="page-title">Lojinha da Foxy</h1>
    <p>Compre backgrounds e decoraÃ§Ãµes de avatar para o seu perfil! (â—•â€¿â—•âœ¿)<br><br>A loja Ã© atualizada todos os dias Ã s
      21:00
      (HorÃ¡rio de BrasÃ­lia)</p>
    <div class="remaining-time">
      <h2>Tempo restante para a prÃ³xima atualizaÃ§Ã£o:</h2>
      <h2 id="countdown"></h2>
      <main id="content" class="hidden">
        <!-- Content will be injected here by JavaScript -->
      </main>

      <div id="popup" class="popup hidden">
        <div class="popup-content">
          <span class="close" onclick="hidePopup()">&times;</span>
          <h2 id="bg-title"></h2>
          <img id="popup-img" src="" alt="Background Image">
          <h3 id="bg-description"></h3>
          <h3>VocÃª possui <strong style="color: #e7385d;" id="user-cakes"></strong> Cakes</h3>
          <form id="purchaseForm" method="POST">
            <input type="hidden" name="backgroundId" id="backgroundId">
            <div class="popup-buttons">
              <button id="save" type="submit">Comprar</button>
            </div>
          </form>
        </div>
      </div>

      <script>
        window.addEventListener('load', function () {
          fetch('/br/store/data')
            .then(response => response.json())
            .then(data => {
              document.getElementById('loadingOverlay').classList.add('hidden');
              document.getElementById('content').classList.remove('hidden');

              const contentDiv = document.getElementById('content');

              function generateItemsBlock(items, type, userList) {
                return `
          <div class="itens ${type}">
            ${items.reverse().map(item => {
                  if (item.cakes === 0 || item.inactive) return '';

                  const itemStr = JSON.stringify(item).replace(/"/g, '&quot;');
                  const userStr = JSON.stringify(data.user).replace(/"/g, '&quot;');
                  const userDataStr = JSON.stringify(data.userData).replace(/"/g, '&quot;');
                  const isPurchased = userList.includes(item.id);

                  return `
                <div class="item ${isPurchased ? 'disabled' : ''}"
                  onclick="showPopup(${itemStr}, ${userStr}, ${userDataStr})">
                  <div class="item__icon">
                    <img class="${type}" 
                      src="https://cakey.foxybot.win/assets/${type}/${item.filename}" 
                      onerror="this.src='https://cakey.foxybot.win/assets/masks/${item.filename}'" 
                      alt="${item.name}">
                  </div>
                  <div class="item_info">
                    <h1 class="item-name">${item.name}</h1>
                    ${isPurchased ? `
                      <span class="purchased">ðŸ’– JÃ¡ comprado</span>
                    ` : `
                      <span class="cakes">${item.cakes.toLocaleString("pt-BR")} Cakes</span>
                    `}
                  </div>
                </div>
              `;
                }).join('')}
          </div>
        `;
              }

              const { backgrounds, decorations } = data.storeContent;

              contentDiv.innerHTML = `
        ${generateItemsBlock(backgrounds, 'backgrounds', data.userData.userProfile.backgroundList)}
        ${generateItemsBlock(decorations, 'decorations', data.userData.userProfile.decorationList)}
      `;

              document.getElementById('user-cakes').innerText =
                data.userData.userCakes.balance.toLocaleString("pt-BR");
              startCountdown(data.lastUpdate);
            })
            .catch(error => {
              console.error('Erro ao buscar os dados:', error);
              document.getElementById('loadingOverlay').innerText =
                'Falha ao carregar o conteÃºdo. Tente novamente mais tarde.';
            });

        });

        function startCountdown(lastUpdate) {
          const updateHour = 21;
          const lastUpdateDate = new Date(lastUpdate);
          const now = new Date();

          let nextUpdate = new Date(lastUpdateDate);
          nextUpdate.setHours(updateHour, 0, 0, 0);

          if (now.getTime() >= nextUpdate.getTime()) {
            nextUpdate.setDate(nextUpdate.getDate() + 1);
          }

          const countdownElement = document.getElementById('countdown');

          function updateCountdown() {
            const now = new Date();
            const distance = nextUpdate - now;

            if (distance <= 0) {
              countdownElement.innerHTML = "00:00:00:00";
              startCountdown(nextUpdate);
              return;
            }

            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            countdownElement.innerHTML = `${String(days).padStart(2, '0')}:${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
          }

          updateCountdown();
          setInterval(updateCountdown, 1000);
        }

        function showPopup(background, user, userData) {
          document.getElementById('backgroundId').value = background.id;
          document.getElementById('popup').classList.add('visible');
          document.getElementById('popup').classList.remove('hidden');
          document.getElementById('bg-title').innerText = background.name;
          document.getElementById('bg-description').innerText = background.description;
          document.getElementById('popup-img').src = "https://orchid.cakeyfox.live/assets/backgrounds/" + background.filename;

          document.getElementById('popup-img').onerror = function () {
            this.src = "https://cakey.foxybot.win/assets/backgrounds/" + background.filename;
          };

          const userCakes = parseInt(document.getElementById('user-cakes').innerText.replace(/\D/g, ''));
          const saveButton = document.getElementById('save');
          if (userData.userProfile.backgroundList.includes(background.id) || userData.userProfile.decorationList.includes(background.id)) {
            saveButton.disabled = true;
            saveButton.classList.add('disabled');
            saveButton.innerText = 'Comprado';
          } else {
            saveButton.disabled = userCakes < background.cakes;
            saveButton.classList.toggle('disabled', saveButton.disabled);
          }
        }

        function hidePopup() {
          const popup = document.getElementById('popup');
          popup.classList.remove('visible');

          setTimeout(() => {
            popup.classList.add('hidden');
          }, 300);
        }

        document.getElementById('purchaseForm').addEventListener('submit', function (event) {
          const backgroundId = document.getElementById('backgroundId').value;
          this.action = "/br/store/confirm/" + backgroundId;
        });
      </script>
</body>

</html>